name: Update chart appVersion

on:
  workflow_dispatch:
    inputs:
      chart:
        description: "name fo chart"
        required: true
      version:
        description: "new appVersion"
        required: true
  repository_dispatch:
    types: [update_chart_version]

jobs:
  check_vars:
    runs-on: ubuntu-latest
    outputs:
      chart: ${{ steps.eval.outputs.chart }}
      appVersion: ${{ steps.eval.outputs.appVersion }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: check workflow_dispatch or repository_dispatch
        id: eval
        shell: bash
        run: |
          if [ "${{ github.event.inputs.chart }}" != "" ]; then
            echo "::set-output name=chart::${{ github.event.inputs.chart }}"
            echo "::set-output name=appVersion::${{ github.event.inputs.version }}"
          else
            echo "::set-output name=chart::${{ github.event.client_payload.chart }}"
            echo "::set-output name=appVersion::${{ github.event.client_payload.version }}"
          fi
      - name: check chart
        shell: bash
        env:
          valid: '0-9a-zA-Z\-\_'
        run: |
          if [ ! -d "charts/${{ steps.eval.outputs.chart }}" ]; then
            echo "Chart ${{ steps.eval.outputs.chart }} does not exist. Canceling update..."
            exit 1
          else
            if [[ ! "${{ steps.eval.outputs.appVersion }}" =~ [^$valid] ]]; then
              echo "appVersion does not match regex ${{ steps.eval.outputs.appVersion }}, canceling update..."
              exit 1
            else
              echo "Chart ${{ steps.eval.outputs.chart }} found. Update appVersion to ${{ steps.eval.outputs.appVersion }}"
              exit 0
            fi
          fi

  update_appVersion:
    runs-on: ubuntu-latest
    needs: [check_vars]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install helm-docs @latest
        env:
          DOCS_VERSION: 1.11.0
        run: |
          wget https://github.com/norwoodj/helm-docs/releases/download/v${DOCS_VERSION}/helm-docs_${DOCS_VERSION}_Linux_x86_64.tar.gz -O helm-docs.tar.gz
          tar -xzf helm-docs.tar.gz
      - name: Set appVersion and push
        shell: bash
        env:
          CHART_YAML: charts/${{ needs.check_vars.outputs.chart }}/Chart.yaml
        run: |
          sed -i "s/appVersion: .*/appVersion: ${{ needs.check_vars.outputs.appVersion }}/g" $CHART_YAML

          # Get version
          export chart_version=$(grep 'version:' $CHART_YAML | awk '{ print $2}')

          ### Increments the part of the string
          ## $1: version itself
          ## $2: number of part: 0 – major, 1 – minor, 2 – patch
          increment_version() {
            local delimiter=.
            local array=($(echo "$1" | tr $delimiter '\n'))
            array[$2]=$((array[$2]+1))
            echo $(local IFS=$delimiter ; echo "${array[*]}")
          }

          export new_version=$(increment_version $chart_version 2)

          sed -i "s/version: .*/version: $new_version/g" $CHART_YAML

          cat $CHART_YAML

          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          
          ./helm-docs -t templates/README.md.gotmpl

          git status
          git commit charts/${{ needs.check_vars.outputs.chart }} -m "update chart ${{ needs.check_vars.outputs.chart }} to appVersion ${{ needs.check_vars.outputs.appVersion }}"
          git push
